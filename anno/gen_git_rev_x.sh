
# echo const char* git_rev = R\"\( >  git_rev.h
# git rev-parse --short HEAD >> git_rev.h
# echo \)\"\;  >>  git_rev.h

OUTPUT_FILE=git_info.cpp

# Read branch name *******************************************
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Read revision *******************************************
GIT_REVISION=$(git rev-parse --short HEAD)

# Read URL *******************************************
GIT_URL=$(git config --get remote.origin.url)

# Last commit time *******************************************
GIT_TIME=$(git log -1 --format='%cd')

# Detect modifications *******************************************
GIT_STATUS=()
git status -s | while IFS= read -r line; do
    GIT_STATUS+=("$line")
done

echo // this file is autogenerated                              > "$OUTPUT_FILE"
echo namespace git_info {                                       >> "$OUTPUT_FILE"
echo 'const char* branch = R"('"$GIT_BRANCH"')";'               >> "$OUTPUT_FILE"
echo "const char* revision = R\"($GIT_REVISION)\";"             >> "$OUTPUT_FILE"
echo "const char* time_last_commit = \"$GIT_TIME\";"            >> "$OUTPUT_FILE"
echo "const char* URL = R\"($GIT_URL)\";"                       >> "$OUTPUT_FILE"
if [ ${#GIT_STATUS[@]} -eq 0 ]; then
echo "const char* modified = \"Not modified\";"                 >> "$OUTPUT_FILE"
else
echo "const char* modified = \"Modified\";"                     >> "$OUTPUT_FILE"
fi
echo "const char* commit_time = \"$GIT_TIME\";"                 >> "$OUTPUT_FILE"
echo "const char* build_time = \"$(date)\";"                    >> "$OUTPUT_FILE"
echo }                                                          >> "$OUTPUT_FILE"

